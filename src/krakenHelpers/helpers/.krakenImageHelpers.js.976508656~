import { krakenNullHelpers as h } from "./krakenNullHelpers.js";

export const krakenImageHelpers = {
    getImage: getImageObjectFromUrl,
    resize: resizeImage,
    getRecord: getRecordFromImage,
    convert: 
};

// -----------------------------------------------------
//  Record
// -----------------------------------------------------

function getRecordFromImage(img) {
    
    let record = {};
    record["@type"] = _getRecordTypeFromFile(file);
    record.contentSize = file.size;
    record.dateModified = file.lastModifiedDate;
    record.encodingFormat = file.type;
    record.name = file.type;
    record.width = {
        "@type": "QuantitativeValue",
        "value": img.width,
        "unitCode" : "PX",
        "unitText": "pixels"
    }
    record.height = {
        "@type": "QuantitativeValue",
        "value": img.height,
        "unitCode" : "PX",
        "unitText": "pixels"
    }

    return record;
}

// -----------------------------------------------------
//  Comment 
// -----------------------------------------------------


async function getImageObjectFromUrl(imageUrl) {

    return new Promise((resolve, reject) => {
        const img = new Image();

        img.onload = () => {
            resolve(img);
        };

        img.onerror = () => {
            reject(new Error('Image failed to load'));
        };

        img.src = imageUrl;
    });
}


// -----------------------------------------------------
//  Image manipulation
// -----------------------------------------------------
async function resizeImage(image, width, height) {
  // Create a canvas element
  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;

  // Draw the image on the canvas at the new size
  const ctx = canvas.getContext('2d');
  ctx.drawImage(image, 0, 0, width, height);

  // Convert the canvas to a Blob (asynchronous operation)
  const blob = await new Promise((resolve) => {
    canvas.toBlob(resolve, 'image/jpeg');
  });

  // Convert the Blob to an Image object
  const newImage = new Image();
  const imageUrl = URL.createObjectURL(blob);
  newImage.src = imageUrl;

  // Return a promise that resolves when the image is loaded
  return new Promise((resolve) => {
    newImage.onload = () => {
      resolve(newImage);
    };
  });
}

